-- Coverage to ensure that reltuples is updated correctly upon an index build
-- (i.e. CREATE INDEX) on AO/CO tables.
-- FIXME: Currently doesn't assert reltuples on QD (at the moment, we don't
-- aggregate the reltuples counts on QD at end of command)

SET default_table_access_method TO @amname@;
SET

-- Case 1: Verify that CREATE INDEX is able to update both the aorel's reltuples
-- and the index's reltuples, to equal the actual segment tuple counts.

CREATE TABLE index_build_reltuples_@amname@(a int);
CREATE
INSERT INTO index_build_reltuples_@amname@ SELECT generate_series(1, 10);
INSERT 10

CREATE INDEX ON index_build_reltuples_@amname@(a);
CREATE

SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 5         
 1             | 1         
 2             | 4         
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 5         
 1             | 1         
 2             | 4         
(3 rows)

DROP TABLE index_build_reltuples_@amname@;
DROP

-- Case 2: Verify that CREATE INDEX is able to update the aorel's reltuples
-- to equal the actual segment tuple counts, when there are deleted tuples. For
-- the index, since we don't have a notion of "recently dead" vs surely dead,
-- we are conservative and form index entries even for deleted tuples. Thus, the
-- reltuples count for the index would also account for deleted tuples.

CREATE TABLE index_build_reltuples_@amname@(a int);
CREATE
INSERT INTO index_build_reltuples_@amname@ SELECT generate_series(1, 20);
INSERT 20

SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 8     
 1             | 4     
 2             | 8     
(3 rows)

DELETE FROM index_build_reltuples_@amname@ WHERE a <= 10;
DELETE 10

CREATE INDEX ON index_build_reltuples_@amname@(a);
CREATE

SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 3     
 1             | 3     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 3         
 1             | 3         
 2             | 4         
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 8         
 1             | 4         
 2             | 8         
(3 rows)

DROP TABLE index_build_reltuples_@amname@;
DROP

-- Case 3: Verify that CREATE INDEX is able to update both the aorel's reltuples
-- and the index's reltuples, to equal the actual segment tuple counts, when
-- there are aborted tuples.

CREATE TABLE index_build_reltuples_@amname@(a int);
CREATE

INSERT INTO index_build_reltuples_@amname@ SELECT generate_series(1, 10);
INSERT 10

SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)

BEGIN;
BEGIN
INSERT INTO index_build_reltuples_@amname@ SELECT generate_series(11, 20);
INSERT 10
ABORT;
ABORT

CREATE INDEX ON index_build_reltuples_@amname@(a);
CREATE

SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 5         
 1             | 1         
 2             | 4         
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 5         
 1             | 1         
 2             | 4         
(3 rows)

DROP TABLE index_build_reltuples_@amname@;
DROP

-- Case 4: Verify that CREATE INDEX is able to update both the aorel's reltuples
-- and the index's reltuples, to equal the latest segment tuple counts, even
-- when it is executed in a transaction with a snapshot that precedes the INSERT
-- (highlights the need for using SnapshotAny)

CREATE TABLE index_build_reltuples_@amname@(a int);
CREATE

1: BEGIN ISOLATION LEVEL REPEATABLE READ;
BEGIN
1: SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
(0 rows)

INSERT INTO index_build_reltuples_@amname@ SELECT generate_series(1, 10);
INSERT 10

1: CREATE INDEX ON index_build_reltuples_@amname@(a);
CREATE
1: COMMIT;
COMMIT

SELECT gp_segment_id, count(*) FROM index_build_reltuples_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 5         
 1             | 1         
 2             | 4         
(3 rows)
SELECT gp_segment_id, reltuples FROM gp_dist_random('pg_class') WHERE relname='index_build_reltuples_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples 
---------------+-----------
 0             | 5         
 1             | 1         
 2             | 4         
(3 rows)

DROP TABLE index_build_reltuples_@amname@;
DROP

RESET default_table_access_method;
RESET
