{% set CLI_BEHAVE_TESTS = [
                      {'name': 'gpmovemirrors',
                       'use_concourse_cluster': true,
                       'additional_ccp_vars': 'number_of_nodes: 4'},
                      {'name': 'gppkg',
                       'use_concourse_cluster': true},
                      {'name': 'analyzedb',
                       'use_concourse_cluster': false},
                      {'name': 'gpreload',
                       'use_concourse_cluster': false},
                      {'name': 'gpinitsystem',
                       'use_concourse_cluster': false},
                      {'name': 'gpstate',
                       'use_concourse_cluster': true},
                      {'name': 'replication_slots',
                       'use_concourse_cluster': false},
                      {'name': 'gpactivatestandby',
                       'use_concourse_cluster': true,
                       'set_max_connections': true},
                      {'name': 'gpinitstandby',
                       'use_concourse_cluster': true},
                      {'name': 'gp_bash_functions.sh',
                       'use_concourse_cluster': false},
                      {'name': 'gpcheckcat',
                       'use_concourse_cluster': true},
                      { 'name': 'gpcheckperf',
                        'use_concourse_cluster': true },
                      {'name': 'gprecoverseg',
                       'use_concourse_cluster': true,
                       'additional_ccp_vars': 'number_of_nodes: 3'},
                      {'name': 'gprecoverseg_newhost',
                       'use_concourse_cluster': true,
                       'additional_ccp_vars': 'number_of_nodes: 7',
                       'reserve_spare_hosts': true,
                       'sudo_access_on_hosts': true,
                       'set_max_connections': true},
                      {'name': 'gpaddmirrors',
                       'use_concourse_cluster': true,
                       'additional_ccp_vars': 'number_of_nodes: 4'},
                      {'name': 'gpconfig',
                       'use_concourse_cluster': true,
                       'env': 'LC_CTYPE: en_US.utf8'},
                      {'name': 'gpssh-exkeys',
                       'use_concourse_cluster': true,
                       'additional_ccp_vars': 'number_of_nodes: 4'},
                      {'name': 'gpstart',
                       'use_concourse_cluster': true},
                      {'name': 'gpstop',
                       'use_concourse_cluster': true},
                    ] %}

## ======================================================================
##                   _
##   __ _ _ __   ___| |__   ___  _ __ ___
##  / _` | '_ \ / __| '_ \ / _ \| '__/ __|
## | (_| | | | | (__| | | | (_) | |  \__ \
##  \__,_|_| |_|\___|_| |_|\___/|_|  |___/
## ======================================================================
## NOTE: only one anchors section is allowed per file, so we define this
##  at the top of the file so anchors are usable as early as possible.
anchors:
- &default_platform
  PLATFORM: rhel8-gpdb7

- &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
  terraform_source: ccp_src/google/

- &ccp_default_vars
  instance_type: n1-standard-1
  <<: *default_platform

- &destroy_common
  action: destroy
  plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
  terraform_source: ccp_src/google/
  vars:
    aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
    aws_ebs_volume_type: standard

- &ccp_destroy
  put: terraform
  params:
    <<: *destroy_common
    env_name_file: terraform/name
  get_params:
    action: destroy

- &ccp_destroy_two_clusters
  in_parallel:
    - put: terraform_1
      params:
        <<: *destroy_common
        env_name_file: terraform_1/name
      get_params:
        action: destroy
    - put: terraform_2
      params:
        <<: *destroy_common
        env_name_file: terraform_2/name
      get_params:
        action: destroy

- &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
  AWS_DEFAULT_REGION: ((aws-region))
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: ((tf-bucket-name))
  CLOUD_PROVIDER: google
  <<: *default_platform

- &set_failed
  do:
    - task: on_failure_set_failed
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: gcr.io/data-gpdb-public-images/ccp
            tag: latest
        inputs:
          - name: ccp_src
          - name: terraform
        run:
          path: 'ccp_src/google/ccp_failed_test.sh'
        params:
          GOOGLE_CREDENTIALS: ((google-service-account-key/[[ variables_type ]]))
          GOOGLE_PROJECT_ID: ((google-project-id))
          GOOGLE_ZONE: ((google-zone))
          GOOGLE_SERVICE_ACCOUNT: ((google-service-account/[[ variables_type ]]))
          AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
          AWS_DEFAULT_REGION: ((tf-machine-region))
          BUCKET_PATH: clusters-google/
          BUCKET_NAME: ((tf-bucket-name))

- &set_failed_two_clusters_common
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: gcr.io/data-gpdb-public-images/ccp
      tag: latest
  run:
    path: 'ccp_src/google/ccp_failed_test.sh'
  params:
    GOOGLE_CREDENTIALS: ((google-service-account-key/[[ variables_type ]]))
    GOOGLE_PROJECT_ID: ((google-project-id))
    GOOGLE_ZONE: ((google-zone))
    GOOGLE_SERVICE_ACCOUNT: ((google-service-account/[[ variables_type ]]))
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((tf-machine-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))

- &terraform_cluster
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key/[[ variables_type ]]))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- &set_failed_two_clusters
  in_parallel:
    - task: on_failure_set_failed-1
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_1
    - task: on_failure_set_failed-2
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_2

## ======================================================================
##   __ _ _ __ ___  _   _ _ __  ___
##  / _` | '__/ _ \| | | | '_ \/ __|
## | (_| | | | (_) | |_| | |_) \__ \
##  \__, |_|  \___/ \__,_| .__/|___/
##  |___/                |_|
## ======================================================================

groups:
- name: all
  jobs:
  - check_format
{% if "rhel8" in os_types %}
  - compile_gpdb_rhel8
  - test_gpdb_clients_rhel8
{% endif %}
{% if "win" in os_types %}
  - compile_gpdb_clients_windows
{% endif %}
{% if "ICW" in test_sections %}
  ## --------------------------------------------------------------------
{% if "rhel8" in os_types %}
  - icw_gporca_rhel8
  - icw_planner_rhel8
  - icw_gporca_icproxy_rhel8
  - icw_planner_icproxy_rhel8
  - icw_gporca_ictcp_rhel8
  - icw_mirrorless_rhel8
  - unit_tests_gporca_rhel8
  - gpdb_pitr_rhel8
{% endif %}
{% if "rhel8" in os_types and "CLI" in test_sections %}
  - gpexpand_rhel8
  - pg_upgrade_rhel8
{% endif %}
  - gate_icw_end
{% endif %}
{% if "Interconnect" in test_sections %}
  ## --------------------------------------------------------------------
{% if "rhel8" in os_types %}
  - interconnect_rhel8
{% endif %}
{% endif %}
{% if "ResourceGroups" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_resource_groups_start
{% if "rhel8" in os_types %}
  - resource_group_rhel8
{% endif %}
{% endif %}
{% if "CLI" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_cli_start
  - cli_cross_subnet
{% for test in CLI_BEHAVE_TESTS %}
{% if "rhel8" in os_types %}
  - [[ test.name ]]_rhel8
{% endif %}
{% endfor %}
  - check_centos
  - combine_cli_coverage
{% endif %}
 ## ---------------------------------------------------------------------
{% if "Extensions" in test_sections %}
{% if "rhel8" in os_types %}
  - icw_extensions_gpcloud_rhel8
{% endif %}
{%endif %}


{% if pipeline_configuration == "prod" or build_test_rc_rpm or directed_release %}
## ======================================================================

- name: Release
  jobs:
{% if pipeline_configuration == "prod" or directed_release %}
  - gate_release_candidate_start
  - Release_Candidate
{% if not directed_release %}
  - Publish Server Builds
{% endif %}
{% endif %}
{% if not directed_release %}
  - Build_Release_Candidate_RPMs
{% endif %}

{% endif %}
## ======================================================================

- name: Compile
  jobs:
{% if "rhel8" in os_types %}
  - compile_gpdb_rhel8
  - test_gpdb_clients_rhel8
{% endif %}
{% if "win" in os_types %}
  - compile_gpdb_clients_windows
{% endif %}

{% if "ICW" in test_sections %}
## ======================================================================

- name: ICW
  jobs:
{% if "rhel8" in os_types %}
  - icw_gporca_rhel8
  - icw_planner_rhel8
  - icw_gporca_icproxy_rhel8
  - icw_planner_icproxy_rhel8
  - icw_gporca_ictcp_rhel8
  - icw_mirrorless_rhel8
  - compile_gpdb_rhel8
{% endif %}
{% if "rhel8" in os_types and "CLI" in test_sections %}
  - pg_upgrade_rhel8
{% endif %}
  - gate_icw_end

{% endif %}

## ======================================================================

{% if "Extensions" in test_sections %}
- name: Extensions
  jobs:
{% if "rhel8" in os_types %}
  - icw_extensions_gpcloud_rhel8
{% endif %}

{% endif %}

{% if "Interconnect" in test_sections %}
## ======================================================================

{% if "rhel8" in os_types %}
- name: Interconnect
  jobs:
  - compile_gpdb_rhel8
  - interconnect_rhel8
{% endif %}

{% endif %}
{% if "ResourceGroups" in test_sections %}
## ======================================================================

- name: ResourceGroups
  jobs:
  - gate_resource_groups_start
{% if "rhel8" in os_types %}
  - resource_group_rhel8
  - compile_gpdb_rhel8
{% endif %}

{% endif %}
{% if "CLI" in test_sections %}
## ======================================================================

- name: CLI
  jobs:
  - gate_cli_start
{% if "rhel8" in os_types %}
  - compile_gpdb_rhel8
{% endif %}
  - cli_cross_subnet
{% for test in CLI_BEHAVE_TESTS %}
{% if "rhel8" in os_types %}
  - [[ test.name ]]_rhel8
{% endif %}
{% endfor %}
  - check_centos
  - combine_cli_coverage
{% if "ICW" in test_sections %}
  - gpexpand_rhel8
  - pg_upgrade_rhel8
{% endif %}

{% endif %}

## ======================================================================
##                                           _
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  | |_ _   _ _ __   ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \ | __| | | | '_ \ / _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |_| | |_) |  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___|  \__|\__, | .__/ \___||___/
##                                               |___/|_|
## ======================================================================

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14
- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource
## ======================================================================
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___||___/
## ======================================================================

resources:
{% if "ResourceGroups" in test_sections or "CLI" in test_sections %}
- name: ccp_src
  type: git
  source:
    branch: ((gp-concourse-cluster-provisioner-git-branch))
    private_key: ((gp-concourse-cluster-provisioner-git-key))
    uri: ((gp-concourse-cluster-provisioner-git-remote))

{% if "rhel8" in os_types or
      "ICW"     in test_sections %}
- name: terraform
  <<: *terraform_cluster

- name: terraform_1
  <<: *terraform_cluster

- name: terraform_2
  <<: *terraform_cluster

- name: terraform.d
  source:
    access_key_id: ((aws-bucket-access-key-id))
    bucket: ccp-terraform-provider-plugins
    region_name: ((aws-region))
    secret_access_key: ((aws-bucket-secret-access-key))
    versioned_file: plugin-cache.tgz
  type: s3

- name: alpine-docker
  type: registry-image
  source:
    repository: alpine
    tag: latest

- name: ccp-image
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/ccp
    tag: latest

{% endif %}
{% endif %}
{% if "rhel8" in os_types and "ICW" in test_sections %}
- name: icw_planner_rhel8_dump
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/icw_planner_rhel8_dump/dump.sql.xz

{% endif %}
- name: gpdb_src
  type: git
  source:
    branch: ((gpdb-git-branch))
    uri: ((gpdb-git-remote))
    ignore_paths:
    - gpdb-doc/*
    - README*

{% if "rhel8" in os_types %}
- name: gpdb7-rhel8-build
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-private-images/gpdb7-rhel8-build
    tag: latest
    username: _json_key
    password: ((data-gpdb-private-images-container-registry-readonly-service-account-key))

- name: gpdb7-rhel8-test
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-private-images/gpdb7-rhel8-test
    tag: latest
    username: _json_key
    password: ((data-gpdb-private-images-container-registry-readonly-service-account-key))
{% endif %}

{% if pipeline_configuration == "prod" or directed_release %}
{% if not directed_release %}
- name: bin_gpdb_rhel8_icw_green
  type: s3
  source:
    access_key_id: ((aws-bucket-access-key-id))
    bucket: ((aws-bucket))
    region_name: ((aws-region))
    secret_access_key: ((aws-bucket-secret-access-key))
    versioned_file: bin_gpdb_rhel8/gpdb_branch_master/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_rhel8_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/main/server-rc-(.*)-rhel8_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_rhel8_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/main/clients-rc-(.*)-rhel8_x86_64((rc-build-type-gcs)).tar.gz

{% endif %}
- name: server_src_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
{% if directed_release %}
    regexp: server-src/published/main/((gpdb-git-branch))-server-src-rc-*.tar.gz
{% else %}
    regexp: server-src/published/main/server-src-rc-*.tar.gz
{% endif %}
{% endif %}

{% if pipeline_configuration == "prod" or build_test_rc_rpm %}
- name: gpdb_rpm_installer_rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/main/greenplum-db-(.*)-rhel8-x86_64((rc-build-type-gcs)).rpm

- name: greenplum-database-release
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/greenplum-db/greenplum-database-release.git

- name: license_file
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-for-oss))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: osl/released/gpdb6/open_source_license_greenplum-database-6.0.0-97773a0-(.*).txt

{% endif %}
{% if "rhel8" in os_types %}
- name: bin_gpdb_rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_rhel8/bin_gpdb.tar.gz

- name: bin_gpdb_clients_rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_rhel8/bin_gpdb_clients.tar.gz

{% if pipeline_configuration == "prod" %}
- name: server-build-rhel8
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/main/server-build-(.*)-rhel8_x86_64((rc-build-type-gcs)).tar.gz
{% endif %}

{% endif %}

{% if "win" in os_types %}
- name: bin_gpdb_clients_windows
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_windows/greenplum-clients-x86_64.tar.gz

{% endif %}

- name: reduced-frequency-trigger
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
    start: ((reduced-frequency-trigger-start))
    stop: ((reduced-frequency-trigger-stop))


## ======================================================================
##    _       _
##   (_) ___ | |__  ___
##   | |/ _ \| '_ \/ __|
##   | | (_) | |_) \__ \
##  _/ |\___/|_.__/|___/
## |__/
## ======================================================================

jobs:

## ======================================================================
##  ____  _            _ _              _   _       _ _     _____         _
## |  _ \(_)_ __   ___| (_)_ __   ___  | | | |_ __ (_) |_  |_   _|__  ___| |_ ___
## | |_) | | '_ \ / _ \ | | '_ \ / _ \ | | | | '_ \| | __|   | |/ _ \/ __| __/ __|
## |  __/| | |_) |  __/ | | | | |  __/ | |_| | | | | | |_    | |  __/\__ \ |_\__ \
## |_|   |_| .__/ \___|_|_|_| |_|\___|  \___/|_| |_|_|\__|   |_|\___||___/\__|___/
##         |_|
## ======================================================================

- name: check_format
  plan:
    - get: gpdb_src
      trigger: true
    - task: check_format
      file: gpdb_src/concourse/tasks/check_format.yml
    - task: clang_tidy
      file: gpdb_src/concourse/tasks/clang_tidy.yml
      {% if use_ICW_workers %}
      tags: [icw-rhel8]
      {% endif %}


## ======================================================================
##   ____                      _ _
##  / ___|___  _ __ ___  _ __ (_) | ___
## | |   / _ \| '_ ` _ \| '_ \| | |/ _ \
## | |__| (_) | | | | | | |_) | | |  __/
##  \____\___/|_| |_| |_| .__/|_|_|\___|
##                      |_|
## ======================================================================

{% if "rhel8" in os_types %}
- name: compile_gpdb_rhel8
  plan:
  - in_parallel:
      steps:
      - get: reduced-frequency-trigger
        trigger: ((reduced-frequency-trigger-flag))
      - get: gpdb_src
        passed:
          - check_format
        trigger: ((gpdb_src-trigger-flag))
      - get: gpdb7-rhel8-build
  - task: compile_gpdb
    image: gpdb7-rhel8-build
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: ((configure_flags_with_extensions))
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb_rhel8
        params:
          file: gpdb_artifacts/bin_gpdb.tar.gz
      - put: bin_gpdb_clients_rhel8
        params:
          file: gpdb_artifacts/bin_gpdb_clients.tar.gz

- name: test_gpdb_clients_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            trigger: true
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb
            resource: bin_gpdb_rhel8
            passed: [compile_gpdb_rhel8]
          - get: bin_gpdb_clients
            resource: bin_gpdb_clients_rhel8
            passed: [compile_gpdb_rhel8]
          - get: gpdb7-rhel8-test
    - task: run_tests
      image: gpdb7-rhel8-test
      file: gpdb_src/concourse/tasks/test_gpdb_clients.yml

{% endif %}
{% if "win" in os_types %}
- name: compile_gpdb_clients_windows
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
      - get: gpdb7-rhel8-build
  - task: compile_gpdb_windows_remote
    file: gpdb_src/concourse/tasks/compile_gpdb_remote_windows.yml
    image: gpdb7-rhel8-build
    params:
      REMOTE_HOST: ((remote_win_host_build))
      REMOTE_PORT: ((remote_win_port_build))
      REMOTE_USER: ((remote_win_user_build))
      REMOTE_KEY: ((remote_win_key_build))
  - put: bin_gpdb_clients_windows
    params:
      file: "gpdb_artifacts/greenplum-clients-x86_64.tar.gz"
{% endif %}
{% if "ICW" in test_sections %}
## ======================================================================
##  ___ ______        __
## |_ _/ ___\ \      / /
##  | | |    \ \ /\ / /
##  | | |___  \ V  V /
## |___\____|  \_/\_/
## ======================================================================
{% if "rhel8" in os_types %}
- name: gpdb_pitr_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: [[test_trigger]]
      - get: gpdb7-rhel8-test
  - task: gpdb_pitr
    file: gpdb_src/concourse/tasks/gpdb_pitr.yml
    image: gpdb7-rhel8-test
    params:
      WITH_MIRRORS: true
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
- name: icw_gporca_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        resource: bin_gpdb_rhel8
        passed: [compile_gpdb_rhel8]
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    {% if use_ICW_workers %}
    tags: [icw-rhel8]
    {% endif %}
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    {% if use_ICW_workers %}
    tags: [icw-rhel8]
    {% endif %}
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      TEST_BINARY_SWAP: ((test-binary-swap))
      CONFIGURE_FLAGS: ((configure_flags))
      DUMP_DB: "true"
  - put: icw_planner_rhel8_dump
    params:
      file: sqldump/dump.sql.xz

- name: icw_gporca_icproxy_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        resource: bin_gpdb_rhel8
        passed: [compile_gpdb_rhel8]
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    {% if use_ICW_workers %}
    tags: [icw-rhel8]
    {% endif %}
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_icproxy_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    {% if use_ICW_workers %}
    tags: [icw-rhel8]
    {% endif %}
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_ictcp_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        resource: bin_gpdb_rhel8
        passed: [compile_gpdb_rhel8]
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    {% if use_ICW_workers %}
    tags: [icw-rhel8]
    {% endif %}
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=tcp -c optimizer=on' installcheck-world
      TEST_OS: centos

- name: icw_mirrorless_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    tags: [icw-rhel8]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-mirrorless
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
      WITH_MIRRORS: false
      BLDWRAP_POSTGRES_CONF_ADDONS:
        - wal_level=minimal
        - max_wal_senders=0
        - max_replication_slots=0
        - wal_keep_segments=0
        - gp_dispatch_keepalives_idle=30
        - gp_dispatch_keepalives_interval=10
        - gp_dispatch_keepalives_count=4

- name: unit_tests_gporca_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [compile_gpdb_rhel8]
            trigger: [[ test_trigger ]]
          - get: gpdb7-rhel8-build
    - task: unit_tests_gporca
      file: gpdb_src/concourse/tasks/unit_tests_gporca.yml
      image: gpdb7-rhel8-build
{% endif %}
- name: gate_icw_end
  plan:
  - in_parallel:
      steps:
{% if "rhel8" in os_types %}
      - get: bin_gpdb_rhel8
        passed:
        - icw_gporca_rhel8
        - icw_planner_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - icw_gporca_ictcp_rhel8
        - icw_mirrorless_rhel8
{% if "Extensions" in test_sections %}
        - icw_extensions_gpcloud_rhel8
{% endif %}
      - get: icw_planner_rhel8_dump
        passed:
        - icw_planner_rhel8
{% endif %}
      - get: gpdb_src
        passed:
{% if "Extensions" in test_sections %}
        - icw_extensions_gpcloud_rhel8
{% endif %}
{% if "rhel8" in os_types %}
        - icw_gporca_rhel8
        - icw_planner_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - icw_gporca_ictcp_rhel8
        - icw_mirrorless_rhel8
        - gpdb_pitr_rhel8
{% endif %}
        trigger: true
{% if pipeline_configuration == "prod" and "rhel8" in os_types %}
  - put: bin_gpdb_rhel8_icw_green
    params:
      file: bin_gpdb_rhel8/bin_gpdb.tar.gz
{% endif %}

{% endif %}

{% if "Interconnect" in test_sections %}
## ======================================================================
##  ___ _   _ _____ _____ ____   ____ ___  _   _ _   _ _____ ____ _____
## |_ _| \ | |_   _| ____|  _ \ / ___/ _ \| \ | | \ | | ____/ ___|_   _|
##  | ||  \| | | | |  _| | |_) | |  | | | |  \| |  \| |  _|| |     | |
##  | || |\  | | | | |___|  _ <| |__| |_| | |\  | |\  | |__| |___  | |
## |___|_| \_| |_| |_____|_| \_\\____\___/|_| \_|_| \_|_____\____| |_|
## ======================================================================
{% if "rhel8" in os_types %}
- name: interconnect_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
      - get: bin_gpdb
        passed: [compile_gpdb_rhel8]
        resource: bin_gpdb_rhel8
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rhel8-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off'
        BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
      TEST_OS: centos
{% endif %}

{% endif %}
{% if "ResourceGroups" in test_sections %}
## ======================================================================
##  ____                                     ____
## |  _ \ ___  ___  ___  _   _ _ __ ___ ___ / ___|_ __ ___  _   _ _ __  ___
## | |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \ |  _| '__/ _ \| | | | '_ \/ __|
## |  _ <  __/\__ \ (_) | |_| | | | (_|  __/ |_| | | | (_) | |_| | |_) \__ \
## |_| \_\___||___/\___/ \__,_|_|  \___\___|\____|_|  \___/ \__,_| .__/|___/
##                                                               |_|
## ======================================================================

- name: gate_resource_groups_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
{% if "rhel8" in os_types %}
        - compile_gpdb_rhel8
{% endif %}
        trigger: true
{% if "rhel8" in os_types %}
      - get: bin_gpdb_rhel8
        passed:
        - compile_gpdb_rhel8
{% endif %}

{% if "rhel8" in os_types %}
- name: resource_group_rhel8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_resource_groups_start]
          - get: gpdb_binary
            resource: bin_gpdb_rhel8
            passed: [gate_resource_groups_start]
            trigger: [[ test_trigger ]]
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          PLATFORM: rhel8-gpdb7
          instance_type: n1-standard-2
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: rhel8-gpdb7
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
    - task: run_tests
      file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
      image: ccp-image
      params:
        TEST_OS: rhel8
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed

{% endif %}

{% endif %}

{% if "CLI" in test_sections %}
## ======================================================================
##   ____ _     ___
##  / ___| |   |_ _|
## | |   | |    | |
## | |___| |___ | |
##  \____|_____|___|
## ======================================================================

- name: gate_cli_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - compile_gpdb_rhel8
        trigger: true
      - get: bin_gpdb_rhel8
        passed:
        - compile_gpdb_rhel8

- name: check_centos
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_cli_start]
      - get: bin_gpdb
        resource: bin_gpdb_rhel8
        passed: [gate_cli_start]
        trigger: [[ test_trigger ]]
      - get: gpdb7-rhel8-test
  - task: check_centos
    file: gpdb_src/concourse/tasks/gpMgmt_check_gpdb.yml
    image: gpdb7-rhel8-test
    params:
      TEST_OS: centos
      TEST_NAME: gpmgmt_unit_tests
  - task: publish_coverage
    image: gpdb7-rhel8-test
    config:
      platform: linux
      inputs:
        - name: gpdb_src
        - name: coverage
      run:
        path: gpdb_src/concourse/scripts/gsutil_sync
        args: [ "./coverage/", "gs://((gcs-bucket-coverage))/((pipeline-name))/" ]
      params:
        JSON_KEY: ((concourse-gcs-resources-service-account-key))
      caches:
        - path: pip-cache-dir

{% for test in CLI_BEHAVE_TESTS %}
{% if "rhel8" in os_types %}
- name: [[ test.name ]]_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [compile_gpdb_rhel8]
      - get: gpdb7-rhel8-test
  - in_parallel:
      steps:
      {% if test.use_concourse_cluster %}
      - do:
        - get: gpdb_binary
          resource: bin_gpdb_rhel8
          passed: [compile_gpdb_rhel8]
          trigger: [[ test_trigger ]]
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              PLATFORM: rhel8-gpdb7
              [[ test.additional_ccp_vars ]]
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
            PLATFORM: rhel8-gpdb7
        {% if test.reserve_spare_hosts %}
        - get: alpine-docker
        - task: reserve_spare_hosts
          image: alpine-docker
          config:
            platform: linux
            inputs:
              - name: cluster_env_files
            outputs:
              - name: cluster_env_files
            run:
              path: sh
              args:
                - -exc
                - |
                  # modify the hostfile_init used by gpinitsystem to exclude the last two hosts, so they are spares
                  cp cluster_env_files/hostfile_init cluster_env_files/hostfile_init_orig
                  head -n -2 cluster_env_files/hostfile_init_orig > cluster_env_files/hostfile_init
        {% endif %}
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
        - task: [[ test.name ]]_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rhel8-test
          params:
            {% if test.sudo_access_on_hosts %}
            SUDO_ACCESS_ON_HOSTS: 1
            SUDO_MDW_USERNAME: rhel
            {% endif %}
            BEHAVE_FLAGS: --tags=[[ test.name ]] --tags=concourse_cluster
            [[ test.env ]]
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      {% endif %}
      - do:
        - get: bin_gpdb_rhel8
          resource: bin_gpdb_rhel8
          passed: [compile_gpdb_rhel8]
          trigger: [[ test_trigger ]]
        - task: [[ test.name ]]_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rhel8-test
          input_mapping:
            bin_gpdb: bin_gpdb_rhel8
          params:
            BEHAVE_FLAGS: --tags=[[ test.name ]] --tags=~concourse_cluster,demo_cluster
            [[ test.env ]]

{% endif %}
{% endfor %}

- name: cli_cross_subnet
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rhel8-test
      - get: gpdb_binary
        resource: bin_gpdb_rhel8
        passed: [gate_cli_start]
        trigger: [[ test_trigger ]]
      - get: ccp_src
      - get: ccp-image
      - get: alpine-docker
      - get: terraform.d
        params:
          unpack: true
    - task: generate-ssh-keys
      image: alpine-docker
      config:
        platform: linux
        outputs:
          - name: ssh-extra-key
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client openssl
              ssh-keygen -b 4096 -t rsa -m PEM -f ssh-extra-key/key -N "" -C ""
              openssl rsa -in ssh-extra-key/key -pubout -out ssh-extra-key/key.pem
              sed -i 's/*//;s/ *$//' ssh-extra-key/key.pub
    - in_parallel:
      - do:
        - put: terraform_1
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              PLATFORM: rhel8-gpdb7
              subnet: dynamic
              cluster_suffix: '-1'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_1
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_1
          output_mapping:
            cluster_env_files: cluster_1
      - do:
        - put: terraform_2
          params:
            <<: *ccp_default_params
            vars:
              instance_type: n1-standard-2
              PLATFORM: rhel8-gpdb7
              subnet: toolshed
              cluster_suffix: '-2'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_2
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_2
          output_mapping:
            cluster_env_files: cluster_2
    - task: exchange_keys
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_1/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_2/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_2/.ssh/config
                  ssh $opts rhel@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_2/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_2/.ssh/known_hosts
              done < cluster_1/etc_hostfile

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_2/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_1/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_1/.ssh/config
                  ssh $opts rhel@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_1/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_1/.ssh/known_hosts
              done < cluster_2/etc_hostfile
    - task: combine_cluster_config_files
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        outputs:
          - name: cluster_env_files
        run:
          path: sh
          args:
            - -exc
            - |
              cp -r cluster_1/* cluster_env_files
              cp -r cluster_1/.ssh cluster_env_files
              cat cluster_2/hostfile_all >> cluster_env_files/hostfile_all
              cat cluster_2/etc_hostfile >> cluster_env_files/etc_hostfile
              cat cluster_2/hostfile_init >> cluster_env_files/hostfile_init

              cp cluster_2/.ssh/*.pem cluster_env_files/.ssh
              cat cluster_2/.ssh/known_hosts >> cluster_env_files/.ssh/known_hosts
              cat cluster_2/.ssh/config >> cluster_env_files/.ssh/config
              sed -i '/^Host mdw-1/ s/$/ mdw/' cluster_env_files/.ssh/config
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        GPINIT_STANDBY_MASTER: '-s mdw-2'
    - task: cross_subnet_tests
      file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
      image: ccp-image
      params:
        BEHAVE_FLAGS: --tags=cross_subnet
        TEST_NAME: cross_subnet
  on_success:
    <<: *ccp_destroy_two_clusters
  ensure:
    <<: *set_failed_two_clusters

- name: combine_cli_coverage
  plan:
    - in_parallel:
        steps:
        - get: gpdb7-rhel8-test
        - get: gpdb_src
          passed:
            - compile_gpdb_rhel8
        - get: bin_gpdb_rhel8
          trigger: true
          passed:
            - check_centos
          {% for test in CLI_BEHAVE_TESTS %}
            - [[ test.name ]]_rhel8
          {% endfor %}
    - task: combine_coverage
      image: gpdb7-rhel8-test
      input_mapping:
        bin_gpdb: bin_gpdb_rhel8
      config:
        platform: linux
        inputs:
          - name: gpdb_src
          - name: bin_gpdb
        run:
          path: gpdb_src/concourse/scripts/combine_cli_coverage.bash
          args: [ "gs://((gcs-bucket-coverage))/((pipeline-name))/", "((gcs-bucket-coverage))/((pipeline-name))" ]
        params:
          JSON_KEY: ((concourse-gcs-resources-service-account-key))
        caches:
          - path: pip-cache-dir

{% if "ICW" in test_sections %}
- name: pg_upgrade_rhel8
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [icw_planner_rhel8]
      - get: bin_gpdb_rhel8
        passed: [icw_planner_rhel8]
        trigger: [[ test_trigger ]]
      - get: icw_planner_rhel8_dump
        passed: [icw_planner_rhel8]
      - get: ccp_src
      - get: terraform.d
        params:
          unpack: true
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-2
        PLATFORM: rhel8-gpdb7
        number_of_nodes: 2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: rhel8-gpdb7
    input_mapping:
      gpdb_binary: bin_gpdb_rhel8
  - task: set_gpinitsystem_config
    file: gpdb_src/concourse/tasks/set_gpinitsystem_config.yml
    params:
      GPINITSYSTEM_CONFIG: gpdb_src/concourse/scripts/configurations/pg_upgrade_gpinitsystem_config
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: test_upgrade
    file: gpdb_src/concourse/tasks/test_upgrade.yml
    input_mapping:
      sqldump: icw_planner_rhel8_dump
    params:
      NUMBER_OF_NODES: 2

- name: gpexpand_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
          - gpMgmt/bin/pythonSrc/ext
        passed: [icw_planner_rhel8]
      - get: gpdb_binary
        resource: bin_gpdb_rhel8
        passed: [icw_planner_rhel8]
        trigger: [[ test_trigger ]]
      - get: ccp_src
      - get: ccp-image
      - get: icw_planner_rhel8_dump
        passed: [icw_planner_rhel8]
      - get: terraform.d
        params:
          unpack: true
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-4
        PLATFORM: rhel8-gpdb7
        number_of_nodes: 5
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: pre_run_test_setup
    file: gpdb_src/concourse/tasks/setup_for_gpexpand_to_make_new_gpdb.yml
    image: ccp-image
    input_mapping: {sqldump: icw_planner_rhel8_dump}
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
    params:
      BEHAVE_FLAGS: --tags=gpexpand
    image: ccp-image
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

{% endif %}

{% endif %} # end CLI test_sections

{% if pipeline_configuration == "prod" or build_test_rc_rpm or directed_release %}
## ======================================================================
##  ____      _
## |  _ \ ___| | ___  __ _ ___  ___
## | |_) / _ \ |/ _ \/ _` / __|/ _ \
## |  _ <  __/ |  __/ (_| \__ \  __/
## |_| \_\___|_|\___|\__,_|___/\___|
## ======================================================================

{% if pipeline_configuration == "prod" or directed_release %}
- name: gate_release_candidate_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - check_format
        - compile_gpdb_rhel8
        - icw_gporca_rhel8
        - icw_planner_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - icw_gporca_ictcp_rhel8
        - icw_mirrorless_rhel8
        - icw_extensions_gpcloud_rhel8
        - cli_cross_subnet
        - unit_tests_gporca_rhel8
        - test_gpdb_clients_rhel8
        - gpdb_pitr_rhel8
{% for test in CLI_BEHAVE_TESTS %}
{% if "rhel8" in os_types %}
        - [[ test.name ]]_rhel8
        - resource_group_rhel8
        - interconnect_rhel8
{% endif %}
{% endfor %}
        - pg_upgrade_rhel8
        - gpexpand_rhel8
        - check_centos
      - get: bin_gpdb_rhel8
        trigger: true
        passed:
        - compile_gpdb_rhel8
        - icw_planner_rhel8
        - icw_gporca_rhel8
        - icw_gporca_icproxy_rhel8
        - icw_planner_icproxy_rhel8
        - icw_gporca_ictcp_rhel8
        - icw_mirrorless_rhel8
        - icw_extensions_gpcloud_rhel8
        - resource_group_rhel8
        - interconnect_rhel8
        - cli_cross_subnet
  {% for test in CLI_BEHAVE_TESTS %}
        - [[ test.name ]]_rhel8
{% endfor %}
      - get: bin_gpdb_clients_rhel8
        passed:
        - compile_gpdb_rhel8

{% if not directed_release %}
- name: Publish Server Builds
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - compile_gpdb_rhel8
      - get: bin_gpdb_rhel8
        passed: [compile_gpdb_rhel8]
      - get: gpdb7-rhel8-build
  - task: rename server build artifacts
    image: gpdb7-rhel8-build
    file: gpdb_src/concourse/tasks/rename-server-build.yml
    params:
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: server-build-rhel8
        params:
          file: output/server-build-*-rhel8*.tar.gz

{% endif %}
- name: Release_Candidate
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed: [gate_release_candidate_start]
{% if not directed_release %}
      - get: bin_gpdb_rhel8
        trigger: true
        passed: [ gate_release_candidate_start ]
      - get: bin_gpdb_clients_rhel8
        trigger: true
        passed: [gate_release_candidate_start]
      - get: gpdb7-rhel8-build
{% endif %}
  - in_parallel:
      steps:
{% if not directed_release %}
      - task: rename_rc_artifacts
        image: gpdb7-rhel8-build
        file: gpdb_src/concourse/tasks/rename_rc_artifacts.yml
        params:
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
      - task: verify_gpdb_versions
        image: gpdb7-rhel8-build
        file: gpdb_src/concourse/tasks/verify_gpdb_versions.yml
{% endif %}
      - task: tar_git_repo
        image: gpdb7-rhel8-build
        file: gpdb_src/concourse/tasks/tar_git_repo.yml
        params:
{% if directed_release %}
          SERVER_SRC_RC_PREFIX: ((gpdb-git-branch))-
{% else %}
          SERVER_SRC_RC_PREFIX: ""
{% endif %}
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
{% if not directed_release %}
      - put: bin_gpdb_rhel8_rc
        params:
          file: "release_candidates/server-rc-*rhel8*.tar.gz"
      - put: bin_gpdb_clients_rhel8_rc
        params:
          file: "release_candidates/clients-rc-*rhel8*.tar.gz"
{% endif %}
      - put: server_src_rc
        params:
          file: "server_tar/*server-src-rc-*.tar.gz"

{% endif %}

{% if not directed_release %}
- name: Build_Release_Candidate_RPMs
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
{% if not build_test_rc_rpm %}
            passed: [gate_release_candidate_start]
{% endif %}
{% if not build_test_rc_rpm %}
            passed: [gate_release_candidate_start]
{% endif %}
          - get: bin_gpdb_rhel8
            trigger: true
{% if not build_test_rc_rpm %}
            passed: [gate_release_candidate_start]
{% endif %}
          - get: gpdb7-rhel8-build
          - get: greenplum-database-release
          - get: license_file
    - task: create_gpdb_rpm_package_rhel8
      file: greenplum-database-release/ci/concourse/tasks/build-gpdb-rpm.yml
      image: gpdb7-rhel8-build
      input_mapping:
        bin_gpdb: bin_gpdb_rhel8
      output_mapping:
        gpdb_rpm_installer: gpdb_rpm_rhel8
      params:
        PLATFORM: "rhel8"
        GPDB_NAME: greenplum-db-7
        GPDB_RELEASE: 1
        GPDB_LICENSE: VMware, Inc. or its affiliates EULA
        GPDB_URL: https://github.com/greenplum-db/gpdb
        GPDB_OSS: false
    - task: rename_rc_artifacts
      image: gpdb7-rhel8-build
      config:
        platform: linux
        inputs:
          - name: gpdb_src
          - name: gpdb_rpm_rhel8
        outputs:
          - name: renamed_gpdb_rpm_rhel8
        params:
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
        run:
          path: sh
          args:
            - -exc
            - |
              gpdb_semver=$(gpdb_src/getversion | cut -d' ' -f1)
{% if build_test_rc_rpm %}
              # Uniquely name the rpm using the github username and test branch
              # to prevent filename collisions on GCS.
              cp -v gpdb_rpm_rhel8/*.rpm renamed_gpdb_rpm_rhel8/greenplum-db-[[ git_username ]]-[[ git_branch ]]-${gpdb_semver}-rhel8-x86_64${RC_BUILD_TYPE_GCS}.rpm
{% else %}
              cp -v gpdb_rpm_rhel8/*.rpm renamed_gpdb_rpm_rhel8/greenplum-db-${gpdb_semver}-rhel8-x86_64${RC_BUILD_TYPE_GCS}.rpm
{% endif %}
    - in_parallel:
        steps:
          - put: gpdb_rpm_installer_rhel8
            params:
              file: renamed_gpdb_rpm_rhel8/*.rpm

{% endif %}
{% endif %}

## ======================================================================
##    __      _                 _
##   /__\_  _| |_ ___ _ __  ___(_) ___  _ __  ___
##  /_\ \ \/ / __/ _ \ '_ \/ __| |/ _ \| '_ \/ __|
## //__  >  <| ||  __/ | | \__ \ | (_) | | | \__ \
## \__/ /_/\_\\__\___|_| |_|___/_|\___/|_| |_|___/
## ======================================================================

{% if "Extensions" in test_sections %}
{% if 'rhel8' in os_types%}
- name: icw_extensions_gpcloud_rhel8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [compile_gpdb_rhel8]
        trigger: [[ test_trigger ]]
      - get: bin_gpdb_rhel8
        passed: [compile_gpdb_rhel8]
      - get: gpdb7-rhel8-test
  - in_parallel:
      steps:
      - task: unit_tests_gpcloud
        file: gpdb_src/concourse/tasks/unit_tests_gpcloud.yml
        image: gpdb7-rhel8-test
        params:
          TARGET_OS: centos
      - task: regression_tests_gpcloud_centos
        input_mapping:
          bin_gpdb: bin_gpdb_rhel8
        file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
        image: gpdb7-rhel8-test
        params:
          gpcloud_access_key_id: ((gpcloud-access-key-id))
          gpcloud_secret_access_key: ((gpcloud-secret-access-key))
          TARGET_OS: centos
      - task: gpcheckcloud_tests_gpcloud_centos
        input_mapping:
          bin_gpdb: bin_gpdb_rhel8
        file: gpdb_src/concourse/tasks/gpcheckcloud_tests_gpcloud.yml
        image: gpdb7-rhel8-test
        params:
          gpcloud_access_key_id: ((gpcloud-access-key-id))
          gpcloud_secret_access_key: ((gpcloud-secret-access-key))
          TARGET_OS: centos
{% endif %}
{% endif %}
